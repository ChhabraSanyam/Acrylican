version: '3.8'

services:
  # Production PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: artisan-platform-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-artisan_platform}
      POSTGRES_USER: ${POSTGRES_USER:-artisan_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - artisan-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-artisan_user} -d ${POSTGRES_DB:-artisan_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production Redis Cache
  redis:
    image: redis:7-alpine
    container_name: artisan-platform-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - artisan-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: artisan-platform-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-artisan_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-artisan_platform}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CLOUD_STORAGE_BUCKET=${CLOUD_STORAGE_BUCKET}
      - CLOUD_STORAGE_CREDENTIALS=${CLOUD_STORAGE_CREDENTIALS}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - artisan-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: artisan-platform-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "80:80"
      - "443:443"
    networks:
      - artisan-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Migration Service
  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: artisan-platform-migrate
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-artisan_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-artisan_platform}
    command: ["alembic", "upgrade", "head"]
    networks:
      - artisan-network
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  artisan-network:
    driver: bridge