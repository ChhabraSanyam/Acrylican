apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: artisan-platform
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: postgres:14-alpine
            command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache aws-cli gzip
              
              # Database backup
              PGPASSWORD="$POSTGRES_PASSWORD" pg_dump \
                -h "$POSTGRES_HOST" \
                -U "$POSTGRES_USER" \
                -d "$POSTGRES_DB" \
                --verbose --clean --no-owner --no-privileges \
                | gzip > /tmp/postgres_backup_$(date +%Y%m%d_%H%M%S).sql.gz
              
              # Upload to S3
              aws s3 cp /tmp/postgres_backup_*.sql.gz s3://artisan-platform-backups/database/ \
                --storage-class STANDARD_IA
              
              echo "Database backup completed successfully"
            env:
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: host
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: secret-access-key
            - name: AWS_DEFAULT_REGION
              value: "us-west-2"
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-backup
  namespace: artisan-platform
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: redis:7-alpine
            command:
            - /bin/sh
            - -c
            - |
              apk add --no-cache aws-cli gzip
              
              # Redis backup
              redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" --rdb /tmp/redis_backup_$(date +%Y%m%d_%H%M%S).rdb
              gzip /tmp/redis_backup_*.rdb
              
              # Upload to S3
              aws s3 cp /tmp/redis_backup_*.rdb.gz s3://artisan-platform-backups/redis/ \
                --storage-class STANDARD_IA
              
              echo "Redis backup completed successfully"
            env:
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: port
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: secret-access-key
            - name: AWS_DEFAULT_REGION
              value: "us-west-2"
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: file-storage-backup
  namespace: artisan-platform
spec:
  schedule: "0 4 * * 0"  # Weekly on Sunday at 4 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: amazon/aws-cli:latest
            command:
            - /bin/sh
            - -c
            - |
              # Sync files to backup bucket with Glacier storage
              aws s3 sync s3://artisan-platform-files s3://artisan-platform-backups/files/$(date +%Y%m%d_%H%M%S)/ \
                --storage-class GLACIER \
                --exclude "*.tmp" \
                --exclude "temp/*"
              
              echo "File storage backup completed successfully"
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: secret-access-key
            - name: AWS_DEFAULT_REGION
              value: "us-west-2"
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 1