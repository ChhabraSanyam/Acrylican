name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest-xvfb  # For headless browser tests
    
    - name: Run unit tests
      run: |
        cd backend
        python -m pytest -m "unit" \
          --cov=app \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --junit-xml=test-results/unit-tests.xml \
          --maxfail=10 \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend-unit
        name: backend-unit-tests
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-unit-test-results
        path: backend/test-results/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        cd backend
        python -m pytest -m "integration" \
          --cov=app \
          --cov-report=xml:coverage-integration.xml \
          --junit-xml=test-results/integration-tests.xml \
          --maxfail=5 \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage-integration.xml
        flags: backend-integration
        name: backend-integration-tests

  backend-e2e-tests:
    name: Backend E2E Tests
    runs-on: ubuntu-latest
    needs: backend-integration-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        playwright install chromium
    
    - name: Run E2E tests
      run: |
        cd backend
        python -m pytest -m "e2e" \
          --junit-xml=test-results/e2e-tests.xml \
          --maxfail=3 \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        TESTING: true

  backend-performance-tests:
    name: Backend Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        cd backend
        python -m pytest -m "performance" \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --junit-xml=test-results/performance-tests.xml \
          -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        TESTING: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark-results
        path: backend/benchmark-results.json

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-tests
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: frontend/coverage/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety check
      run: |
        cd backend
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json backend/app/
      continue-on-error: true
    
    - name: Run backend security tests
      run: |
        cd backend
        python -m pytest -m "security" \
          --junit-xml=test-results/security-tests.xml \
          -v
      env:
        TESTING: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          semgrep-report.json
          backend/test-results/security-tests.xml

  build-and-test:
    name: Build and Integration Test
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      run: |
        docker build -t artisan-platform-backend:test backend/
    
    - name: Build frontend image
      run: |
        docker build -t artisan-platform-frontend:test frontend/
    
    - name: Run integration tests with Docker
      run: |
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
        docker-compose -f docker-compose.test.yml down
    
    - name: Test health endpoints
      run: |
        docker run -d --name backend-test -p 8000:8000 artisan-platform-backend:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop backend-test
        docker rm backend-test

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, backend-e2e-tests, frontend-tests, security-tests, build-and-test]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "# Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend-unit-tests.result }}" == "success" ]; then
          echo "✅ Backend Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-integration-tests.result }}" == "success" ]; then
          echo "✅ Backend Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-e2e-tests.result }}" == "success" ]; then
          echo "✅ Backend E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "✅ Frontend Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-tests.result }}" == "success" ]; then
          echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-and-test.result }}" == "success" ]; then
          echo "✅ Build and Integration: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Build and Integration: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports are available in the artifacts section." >> $GITHUB_STEP_SUMMARY