"""
Integration tests for content generation API endpoints.

Tests the FastAPI endpoints for content generation functionality
including authentication, validation, and error handling.
"""

import pytest
from fastapi.testclient import TestClient
from unittest.mock import patch, Mock, PropertyMock
import json

from app.main import app
from app.services.content_generation import ContentGenerationError
from app.dependencies import get_current_user
from app.models import User


class TestContentGenerationAPI:
    """Test cases for content generation API endpoints."""
    
    @pytest.fixture
    def client(self, mock_user):
        """Test client for API calls with mocked authentication."""
        def override_get_current_user():
            return mock_user
        
        app.dependency_overrides[get_current_user] = override_get_current_user
        client = TestClient(app)
        yield client
        app.dependency_overrides.clear()
    
    @pytest.fixture
    def mock_user_token(self):
        """Mock JWT token for authenticated requests."""
        # This would typically be generated by your auth system
        return "mock-jwt-token"
    
    @pytest.fixture
    def mock_user(self):
        """Mock user object."""
        return Mock(
            id="user-123",
            business_name="Test Artisan Shop",
            business_type="Handcrafted Goods",
            business_description="Creating beautiful handmade items",
            location="Portland, OR",
            website="https://testartisan.com"
        )
    
    @pytest.fixture
    def content_generation_request(self):
        """Sample content generation request."""
        return {
            "description": "Beautiful handcrafted wooden bowl made from sustainable oak wood",
            "target_platforms": ["facebook", "instagram", "etsy"],
            "product_category": "Home Decor",
            "price_range": "$50-100",
            "target_audience": "Home decor enthusiasts and eco-conscious consumers"
        }
    
    @pytest.fixture
    def mock_generated_content(self):
        """Mock generated content response."""
        return {
            "title": "Handcrafted Oak Wooden Bowl - Sustainable Artisan Made",
            "description": "Transform your dining experience with this stunning handcrafted wooden bowl, meticulously carved from sustainable oak by skilled artisans.",
            "hashtags": ["#handcrafted", "#woodenbowl", "#sustainablewood", "#artisanmade", "#homedecor"],
            "variations": [
                {"title": "Sustainable Oak Bowl - Kitchen Essential", "focus": "benefit-focused"}
            ],
            "platform_specific": {
                "facebook": {
                    "title": "Handcrafted Oak Bowl - Perfect for Your Kitchen",
                    "description": "Beautiful wooden bowl made by skilled artisans...",
                    "hashtags": ["#handcrafted", "#woodenbowl", "#homedecor"],
                    "call_to_action": "Learn more about this beautiful piece!",
                    "character_count": {"title": 45, "description": 200},
                    "optimization_notes": "Optimized for Facebook engagement"
                }
            }
        }
    
    def test_generate_content_success(self, client, content_generation_request, mock_generated_content):
        """Test successful content generation."""
        with patch('app.services.content_generation.content_generation_service.generate_content') as mock_generate:
            # Mock the service response
            from app.services.content_generation import GeneratedContent
            mock_generate.return_value = GeneratedContent(
                title=mock_generated_content["title"],
                description=mock_generated_content["description"],
                hashtags=mock_generated_content["hashtags"],
                variations=mock_generated_content["variations"],
                platform_specific=mock_generated_content["platform_specific"]
            )
            
            response = client.post(
                "/content/generate",
                json=content_generation_request,
                headers={"Authorization": "Bearer mock-token"}
            )
            
            assert response.status_code == 200
            data = response.json()
            
            assert data["success"] is True
            assert data["message"] == "Content generated successfully"
            assert "processing_time" in data
            assert data["content"]["title"] == mock_generated_content["title"]
            assert len(data["content"]["hashtags"]) == 5
            assert "facebook" in data["content"]["platform_specific"]
    
    def test_generate_content_unauthorized(self, content_generation_request):
        """Test content generation without authentication."""
        # Create client without auth override
        client = TestClient(app)
        response = client.post("/content/generate", json=content_generation_request)
        
        assert response.status_code == 403  # FastAPI returns 403 for missing auth
    
    def test_generate_content_invalid_input(self, client):
        """Test content generation with invalid input."""
        invalid_request = {
            "description": "",  # Empty description
            "target_platforms": []  # Empty platforms list
        }
        
        response = client.post(
            "/content/generate",
            json=invalid_request,
            headers={"Authorization": "Bearer mock-token"}
        )
        
        assert response.status_code == 422  # Validation error
    
    def test_generate_content_service_error(self, client, content_generation_request):
        """Test content generation with service error."""
        with patch('app.services.content_generation.content_generation_service.generate_content') as mock_generate:
            mock_generate.side_effect = ContentGenerationError("Gemini API key not configured")
            
            response = client.post(
                "/content/generate",
                json=content_generation_request,
                headers={"Authorization": "Bearer mock-token"}
            )
            
            assert response.status_code == 400
            data = response.json()
            assert "Gemini API key not configured" in data["detail"]
    
    def test_generate_content_unexpected_error(self, client, content_generation_request):
        """Test content generation with unexpected error."""
        with patch('app.services.content_generation.content_generation_service.generate_content') as mock_generate:
            mock_generate.side_effect = Exception("Unexpected error")
            
            response = client.post(
                "/content/generate",
                json=content_generation_request,
                headers={"Authorization": "Bearer mock-token"}
            )
            
            assert response.status_code == 500
            data = response.json()
            assert "unexpected error occurred" in data["detail"]
    
    def test_get_supported_platforms(self, client):
        """Test getting supported platforms."""
        response = client.get("/content/platforms")
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert "platforms" in data
        assert "total_count" in data
        
        platforms = data["platforms"]
        assert "facebook" in platforms
        assert "instagram" in platforms
        assert "etsy" in platforms
        
        # Check platform structure
        facebook = platforms["facebook"]
        assert facebook["name"] == "Facebook"
        assert facebook["type"] == "social_media"
        assert "title_max_length" in facebook
        assert "hashtag_limit" in facebook
    
    def test_validate_content_success(self):
        """Test successful content validation."""
        client = TestClient(app)  # No auth needed for validation
        validation_request = {
            "platform": "facebook",
            "title": "Short title",
            "description": "Valid description under limit",
            "hashtags": ["#tag1", "#tag2", "#tag3"]
        }
        
        response = client.post("/content/validate", json=validation_request)
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert data["valid"] is True
        assert data["platform"] == "facebook"
        assert len(data["issues"]) == 0
        assert "character_counts" in data
    
    def test_validate_content_title_too_long(self):
        """Test content validation with title too long."""
        client = TestClient(app)  # No auth needed for validation
        validation_request = {
            "platform": "facebook",
            "title": "This is a very long title that exceeds the maximum character limit for Facebook posts and should trigger a validation error",
            "description": "Valid description",
            "hashtags": ["#tag1"]
        }
        
        response = client.post("/content/validate", json=validation_request)
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert data["valid"] is False
        assert len(data["issues"]) > 0
        
        title_issue = next((issue for issue in data["issues"] if issue["field"] == "title"), None)
        assert title_issue is not None
        assert "exceeds maximum length" in title_issue["issue"]
    
    def test_validate_content_too_many_hashtags(self):
        """Test content validation with too many hashtags."""
        client = TestClient(app)  # No auth needed for validation
        validation_request = {
            "platform": "facebook",
            "title": "Valid title",
            "description": "Valid description",
            "hashtags": ["#tag" + str(i) for i in range(10)]  # Facebook limit is 5
        }
        
        response = client.post("/content/validate", json=validation_request)
        
        assert response.status_code == 200
        data = response.json()
        
        assert data["success"] is True
        assert data["valid"] is False
        
        hashtag_issue = next((issue for issue in data["issues"] if issue["field"] == "hashtags"), None)
        assert hashtag_issue is not None
        assert "Too many hashtags" in hashtag_issue["issue"]
    
    def test_validate_content_unsupported_platform(self):
        """Test content validation with unsupported platform."""
        client = TestClient(app)  # No auth needed for validation
        validation_request = {
            "platform": "unsupported_platform",
            "title": "Valid title",
            "description": "Valid description",
            "hashtags": ["#tag1"]
        }
        
        response = client.post("/content/validate", json=validation_request)
        
        assert response.status_code == 400
        data = response.json()
        assert "Unsupported platform" in data["detail"]
    
    def test_content_service_health_configured(self, client):
        """Test content service health check when properly configured."""
        with patch('app.services.content_generation.content_generation_service.api_key', "test-key"):
            response = client.get("/content/health")
            
            assert response.status_code == 200
            data = response.json()
            
            assert data["success"] is True
            assert data["service"] == "content_generation"
            assert data["status"] == "healthy"
            assert data["api_configured"] is True
    
    def test_content_service_health_not_configured(self, client):
        """Test content service health check when not configured."""
        with patch('app.services.content_generation.content_generation_service.api_key', ""):
            response = client.get("/content/health")
            
            assert response.status_code == 200
            data = response.json()
            
            assert data["success"] is True
            assert data["service"] == "content_generation"
            assert data["status"] == "degraded"
            assert data["api_configured"] is False
            assert "not configured" in data["message"]
    
    def test_content_service_health_error(self, client):
        """Test content service health check with error."""
        # Mock the entire health check to simulate an exception
        with patch('app.routers.content.content_generation_service') as mock_service:
            mock_service.api_key = ""  # Set to empty to avoid other issues
            # Make accessing api_key raise an exception
            type(mock_service).api_key = PropertyMock(side_effect=Exception("Health check error"))
            
            response = client.get("/content/health")
            
            assert response.status_code == 200
            data = response.json()
            
            assert data["success"] is False
            assert data["service"] == "content_generation"
            assert data["status"] == "unhealthy"
    
    def test_generate_content_with_minimal_input(self, client):
        """Test content generation with minimal required input."""
        with patch('app.services.content_generation.content_generation_service.generate_content') as mock_generate:
            from app.services.content_generation import GeneratedContent
            mock_generate.return_value = GeneratedContent(
                title="Test Product",
                description="Test description",
                hashtags=["#test"],
                variations=[],
                platform_specific={}
            )
            
            minimal_request = {
                "description": "Simple product description",
                "target_platforms": ["facebook"]
            }
            
            response = client.post(
                "/content/generate",
                json=minimal_request,
                headers={"Authorization": "Bearer mock-token"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["success"] is True
    
    def test_generate_content_with_all_fields(self, client, mock_generated_content):
        """Test content generation with all optional fields."""
        with patch('app.services.content_generation.content_generation_service.generate_content') as mock_generate:
            from app.services.content_generation import GeneratedContent
            mock_generate.return_value = GeneratedContent(
                title=mock_generated_content["title"],
                description=mock_generated_content["description"],
                hashtags=mock_generated_content["hashtags"],
                variations=mock_generated_content["variations"],
                platform_specific=mock_generated_content["platform_specific"]
            )
            
            complete_request = {
                "description": "Detailed product description with all context",
                "target_platforms": ["facebook", "instagram", "etsy", "pinterest"],
                "product_category": "Home & Garden",
                "price_range": "$25-50",
                "target_audience": "Eco-conscious millennials interested in sustainable home decor"
            }
            
            response = client.post(
                "/content/generate",
                json=complete_request,
                headers={"Authorization": "Bearer mock-token"}
            )
            
            assert response.status_code == 200
            data = response.json()
            assert data["success"] is True
            assert len(data["content"]["platform_specific"]) > 0


class TestContentGenerationValidation:
    """Test input validation for content generation."""
    
    @pytest.fixture
    def client(self):
        mock_user = Mock(id="user-123", business_name="Test Shop")
        
        def override_get_current_user():
            return mock_user
        
        app.dependency_overrides[get_current_user] = override_get_current_user
        client = TestClient(app)
        yield client
        app.dependency_overrides.clear()
    
    def test_description_too_short(self, client):
        """Test validation with description too short."""
        request = {
            "description": "Short",  # Less than 10 characters
            "target_platforms": ["facebook"]
        }
        
        response = client.post(
            "/content/generate",
            json=request,
            headers={"Authorization": "Bearer mock-token"}
        )
        
        assert response.status_code == 422
    
    def test_description_too_long(self, client):
        """Test validation with description too long."""
        request = {
            "description": "x" * 5001,  # Exceeds 5000 character limit
            "target_platforms": ["facebook"]
        }
        
        response = client.post(
            "/content/generate",
            json=request,
            headers={"Authorization": "Bearer mock-token"}
        )
        
        assert response.status_code == 422
    
    def test_empty_platforms_list(self, client):
        """Test validation with empty platforms list."""
        request = {
            "description": "Valid description here",
            "target_platforms": []  # Empty list
        }
        
        response = client.post(
            "/content/generate",
            json=request,
            headers={"Authorization": "Bearer mock-token"}
        )
        
        assert response.status_code == 422
    
    def test_optional_fields_validation(self, client):
        """Test validation of optional fields."""
        with patch('app.services.content_generation.content_generation_service.generate_content'):
            request = {
                "description": "Valid description",
                "target_platforms": ["facebook"],
                "product_category": "x" * 101,  # Exceeds 100 character limit
                "price_range": "x" * 51,  # Exceeds 50 character limit
                "target_audience": "x" * 201  # Exceeds 200 character limit
            }
            
            response = client.post(
                "/content/generate",
                json=request,
                headers={"Authorization": "Bearer mock-token"}
            )
            
            assert response.status_code == 422